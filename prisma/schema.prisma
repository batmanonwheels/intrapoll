// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friend {
  id          Int           @id @default(autoincrement())
  status      FriendStatus?
  requester   User          @relation("requester", fields: [requesterId], references: [id])
  requesterId Int
  addressee   User          @relation("addressee", fields: [addresseeId], references: [id])
  addresseeId Int

  @@unique([requesterId, addresseeId])
}

enum FriendStatus {
  Requested
  Accepted
  Declined
  Blocked
}

model Poll {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(dbgenerated("NOW()")) @db.Timestamp(6)
  expiresAt DateTime   @default(dbgenerated("NOW() + interval '24 hours'")) @db.Timestamp(6)
  expired   Boolean    @default(false)
  question  String?
  options   String[]
  results   Response[]
}

model Response {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  response  String?
  userId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pollId    Int
  poll      Poll?    @relation(fields: [pollId], references: [id])
}

// model UserSettings {
//   id     Int   @id @default(autoincrement())
//   userId Int
//   user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   darkMode Boolean @default(false)
// }

model User {
  id            Int        @id @default(autoincrement())
  username      String?    @unique @db.VarChar(35)
  name          String?    @db.VarChar(50)
  email         String?    @unique @db.VarChar(255)
  bio           String     @db.VarChar(255)
  responses     Response[]
  streak        Int        @default(0)
  longestStreak Int        @default(0)
  verifiedEmail Boolean    @default(false)
  friends       Friend[]   @relation("requester")
  friendOf      Friend[]   @relation("addressee")
  // settings      UserSettings[]

  @@map("users")
}
