generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friend {
  id          Int           @id @default(autoincrement())
  status      FriendStatus?
  addresseeId Int
  requesterId Int
  addressee   User          @relation("addressee", fields: [addresseeId], references: [id])
  requester   User          @relation("requester", fields: [requesterId], references: [id])

  @@unique([requesterId, addresseeId])
}

model Poll {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  expiresAt DateTime   @default(dbgenerated("(now() + '24:00:00'::interval)")) @db.Timestamp(6)
  expired   Boolean    @default(false)
  question  String?
  options   String[]
  results   Response[]
}

model Response {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  response  String?
  option    PollOption
  userId    Int
  pollId    Int
  poll      Poll       @relation(fields: [pollId], references: [id])
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum PollOption {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
}

model UserSettings {
  id     Int     @id @default(autoincrement())
  userId Int
  theme  String? @default("system")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(24)
  username      String         @unique @db.VarChar(32)
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(120)
  // bio           String?        @default("") @db.VarChar(255)
  image         String         @default("https://media.licdn.com/dms/image/D4E03AQHIQWmGZE_rRQ/profile-displayphoto-shrink_400_400/0/1671228163592?e=1696464000&v=beta&t=OpIHZWifYsLTJhKYc3pnNKSDn0z6PtiNj6_XAcvGe9s")
  streak        Int            @default(0)
  longestStreak Int            @default(0)
  verifiedEmail DateTime?
  accounts      Account[]
  friendOf      Friend[]       @relation("addressee")
  friends       Friend[]       @relation("requester")
  responses     Response[]
  settings      UserSettings[]
}

enum FriendStatus {
  Requested
  Accepted
  Declined
  Blocked
}
