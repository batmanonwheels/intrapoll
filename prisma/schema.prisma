generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friend {
  id          Int           @id @default(autoincrement())
  status      FriendStatus?
  addresseeId Int
  requesterId Int
  addressee   User          @relation("addressee", fields: [addresseeId], references: [id])
  requester   User          @relation("requester", fields: [requesterId], references: [id])

  @@unique([requesterId, addresseeId])
}

model Poll {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  expiresAt DateTime     @default(dbgenerated("(now() + '24:00:00'::interval)")) @db.Timestamp(6)
  expired   Boolean      @default(false)
  question  String
  options   PollOption[]
  results   Response[]
}

model PollOption {
  id     Int     @id @default(autoincrement())
  choice String
  image  String?
  pollId Int
  poll   Poll    @relation(fields: [pollId], references: [id])
}

model Response {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now()) @db.Timestamp(6)
  updatedAt DateTime         @default(now()) @db.Timestamp(6)
  response  String?
  option    PollOptionNumber
  userId    Int
  pollId    Int
  poll      Poll             @relation(fields: [pollId], references: [id])
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PollOptionNumber {
  one
  two
  three
  four
  five
  six
}

model UserSettings {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  theme  Theme @default(system)
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Theme {
  light  @map("light")
  dark   @map("dark")
  system @map("system")
}

model Account {
  id       String @id @default(cuid())
  userId   Int    @unique
  password String @db.VarChar(120)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(24)
  username      String        @unique @db.VarChar(32)
  email         String        @unique @db.VarChar(255)
  image         String        @default("https://media.licdn.com/dms/image/D4E03AQHIQWmGZE_rRQ/profile-displayphoto-shrink_400_400/0/1671228163592?e=1696464000&v=beta&t=OpIHZWifYsLTJhKYc3pnNKSDn0z6PtiNj6_XAcvGe9s")
  streak        Int           @default(0)
  longestStreak Int           @default(0)
  verifiedEmail DateTime?
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  account       Account?
  friendOf      Friend[]      @relation("addressee")
  friends       Friend[]      @relation("requester")
  responses     Response[]
  settings      UserSettings?
}

enum FriendStatus {
  requested
  accepted
  declined
  blocked
}
